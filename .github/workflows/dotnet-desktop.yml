name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:
    name: Build
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  

    env:
      Solution_Name: src\WebAppDonne\WebAppDonne.sln         # Substitua pelo nome da sua solução, ou seja, MyWpfApp.sln.
      Test_Project_Path: test\Test.Donne\Test.Donne.csproj   # Substitua pelo caminho do seu projeto de teste, ou seja, MyWpfApp.Tests\MyWpfApp.Tests.csproj.
     
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v3.2.0

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Execute unit tests
      run: dotnet test $env:Test_Project_Path --no-build --verbosity normal

    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
          java-version: 1.17
    
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    
    - name: Cache SonarQube packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    - name: Cache SonarQube scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
      
    - name: Install SonarQube scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
          
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"example" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

    - name: Publish
      run: dotnet publish src/WebAppDonne/WebApi.Donne.csproj -c Release -o website
