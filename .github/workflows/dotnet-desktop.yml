name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:
    name: Build
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  

    env:
      Solution_Name: src\WebAppDonne\WebAppDonne.sln # Nome da sua solução, ou seja, MyWpfApp.sln.
      Test_Project_Path: test\Test.Donne\Test.Donne.csproj # Caminho do seu projeto de teste, ou seja, MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Publish_Directory_Path: src/WebAppDonne/WebApi.Donne.csproj # Caminho da pasta para fazer a publicação do projeto.

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v3.2.0

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Execute unit tests
      run: dotnet test $env:Test_Project_Path

    - name: Publish
      run: dotnet publish $env:Publish_Directory_Path -c Release -o website
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
         java-version: 17
         distribution: 'zulu' 
      
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  
    
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v3
      with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        SONAR_ORGANIZATIONS: ${{ secrets.SONAR_ORGANIZATIONS }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      shell: powershell
      run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"${{ secrets.SONAR_PROJECT_KEY }}" /o:"${{ secrets.SONAR_ORGANIZATIONS }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url=${{ secrets.SONAR_HOST_URL }}
          dotnet restore D:\a\WebAppDonne\WebAppDonne\src\WebAppDonne.sln
          dotnet build D:\a\WebAppDonne\WebAppDonne\src\WebAppDonne.sln --configuration Release --no-restore
          
    - name: Run automated unit and integration tests
      run: dotnet test D:\a\WebAppDonne\WebAppDonne\test\Test.Donne\Test.Donne.csproj --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory coverage

    - name: Copy Coverage To Predictable Location
      run: cp coverage/*/coverage.cobertura.xml coverage/coverage.cobertura.xml

    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.1.4
      with:
        reports: 'coverage/*/coverage.cobertura.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: 'coveragereport' # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'HtmlInline;Cobertura' # The output formats and scope (separated by semicolon)
 
    - name: Create code coverage report
      run: |
        dotnet tool install -g coverlet.console;
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:coverage/*/coverage.cobertura.xml -targetdir:CodeCoverage -reporttypes:'HtmlInline;Cobertura'
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
